import fs from "fs";
import path from "path";

interface Field {
  name: string;
  type: string;
  isPrimary: boolean;
  isAutogenerated: boolean;
  minChar?: number;
  maxChar?: number;
}

interface Schema {
  [key: string]: {
    description?: string;
    fields: Field[];
  };
}

const parseSchema = (filePath: string): Schema => {
  try {
    const content = fs.readFileSync(filePath, "utf-8");
    const lines = content.split("\n");
    const schema: Schema = {};
    let currentSchema: string | null = null;

    lines.forEach((line) => {
      const trimmed = line.trim();

      if (!trimmed) return; // Skip empty lines

      if (trimmed.startsWith("--") && trimmed.endsWith("--")) {
        currentSchema = trimmed.slice(2, -2).trim();
        schema[currentSchema] = { fields: [] };
      } else if (trimmed.startsWith("==") && trimmed.endsWith("==")) {
        if (currentSchema) {
          schema[currentSchema].description = trimmed.slice(2, -2).trim();
        }
      } else if (currentSchema) {
        const [name, type, isPrimary, isAutogenerated, minChar, maxChar] =
          trimmed.split(/\s+/);

        schema[currentSchema].fields.push({
          name,
          type,
          isPrimary: isPrimary === "true",
          isAutogenerated: isAutogenerated === "true",
          minChar: minChar !== "*" ? parseInt(minChar, 10) : undefined,
          maxChar: maxChar !== "*" ? parseInt(maxChar, 10) : undefined,
        });
      }
    });

    return schema;
  } catch (error: any) {
    console.error("Error parsing the schema file:", error.message);
    throw error;
  }
};

// Main Execution
try {
  const schemaPath = path.join(__dirname, "../schema/schema.adt");
  const parsedSchemaPath = path.join(__dirname, "../schema/schema.parsed.json");

  if (!fs.existsSync(schemaPath)) {
    throw new Error(`Schema file not found: ${schemaPath}`);
  }

  const schema = parseSchema(schemaPath);
  fs.writeFileSync(parsedSchemaPath, JSON.stringify(schema, null, 2), "utf-8");
  console.log(`Parsed schema written to ${parsedSchemaPath}`);
} catch (error: any) {
  console.error("Fatal error:", error.message);
}
