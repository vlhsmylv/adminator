const fs = require("fs");
const path = require("path");

// Define the path to the .adt file
const filePath = path.join(__dirname, "schema", "index.adt");

// Function to parse the schema
function parseSchema(content) {
  const lines = content.split("\n");
  const schema = {};
  let currentSection = null;

  lines.forEach((line) => {
    line = line.trim(); // Remove leading and trailing spaces

    if (!line) return; // Skip empty lines

    // Check for schema section
    if (line.startsWith("--") && line.endsWith("--")) {
      currentSection = line.slice(2, -2).trim(); // Extract schema name
      schema[currentSection] = {
        description: "",
        fields: [],
      };
    }
    // Check for schema description
    else if (line.startsWith("==") && line.endsWith("==")) {
      if (currentSection) {
        schema[currentSection].description = line.slice(2, -2).trim(); // Extract description
      }
    }
    // Parse field lines
    else {
      const parts = line.split(/\s+/); // Split by spaces or tabs
      const [name, type, isPrimary, isAutogenerated, minChar, maxChar] = parts;

      if (currentSection) {
        schema[currentSection].fields.push({
          name: name || "",
          type: type || "",
          isPrimary: isPrimary === "true" || false, // Default: false
          isAutogenerated: isAutogenerated === "true" || false, // Default: false
          minChar: minChar ? parseInt(minChar, 10) : null, // Default: null
          maxChar: maxChar ? parseInt(maxChar, 10) : 255, // Default: 255
        });
      }
    }
  });

  return schema;
}

// Export a function that reads and parses the schema synchronously
module.exports = function () {
  const data = fs.readFileSync(filePath, "utf8"); // Synchronous read
  return parseSchema(data);
};
